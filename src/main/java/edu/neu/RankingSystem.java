package edu.neu;

import Jama.Matrix;

public class RankingSystem {

    public RankingSystem() {
        //Creating  Arrays Representing Equations
        double[][] lhsArray = {{21, -1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1,-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	21, -1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1},
                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21}};
//        double[][] lhsArray = {{21, -1,	-1,	-1,	-1,	-1,	0,	0,	0,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	0},
//                {-1,21, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1},
//                {-1,-1,	21,	-1,	-1,	0,	0,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1},
//                {0,-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1},
//                {-1,-1,	0,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	0,	21, -1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	-1,	0,	-1,	21,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	0,	-1,	0,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	0,	21,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1},
//                {0, 0,	-1,	0,	0,	0,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	0,	0,	-1,	0},
//                {-1,-1,	-1,	0,	0,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {0,-1,	-1,	-1,	-1,	-1,	0,	-1,	0,	0,	-1,	21,	0,	-1,	-1,	-1,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	0,	0,	0,	-1,	-1,	0,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	21,	-1,	0,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1,	21,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	0,	-1,	0,	-1,	21,	0,	-1,	-1,	-1},
//                {-1,-1,	0,	-1,	0,	0,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	21,	-1,	-1,	-1},
//                {-1,-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1},
//                {-1,-1,	-1,	-1,	0,	-1,	-1,	0,	-1,	-1,	0,	-1,	0,	-1,	-1,	0,	-1,	-1,	-1,	21}};
//        double[][] lhsArray = {{15, -1,	-1,	-1,	-1,	-1,	0,	0,	0,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	0},
//                {-1,16, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1},
//                {-1,-1,	18,	-1,	-1,	0,	0,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1},
//                {0,-1,	-1,	18,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1},
//                {-1,-1,	0,	-1,	20,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	0,	18, -1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	-1,	0,	-1,	17,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	0,	-1,	0,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	0,	18,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	19,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1},
//                {0, 0,	-1,	0,	0,	0,	-1,	-1,	-1,	13,	-1,	-1,	-1,	-1,	-1,	-1,	0,	0,	-1,	0},
//                {-1,-1,	-1,	0,	0,	-1,	-1,	-1,	-1,	-1,	19,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {0,-1,	-1,	-1,	-1,	-1,	0,	-1,	0,	0,	-1,	15,	0,	-1,	-1,	-1,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	0,	0,	0,	-1,	-1,	0,	-1,	-1,	-1,	17,	-1,	-1,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	18,	-1,	0,	-1,	0,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	0,	-1,	19,	-1,	-1,	-1,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	0,	-1,	0,	-1,	17,	0,	-1,	-1,	-1},
//                {-1,-1,	0,	-1,	0,	0,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	16,	-1,	-1,	-1},
//                {-1,-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	0,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	19,	-1,	-1},
//                {-1,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1},
//                {-1,-1,	-1,	-1,	0,	-1,	-1,	0,	-1,	-1,	0,	-1,	0,	-1,	-1,	0,	-1,	-1,	-1,	16}};
        double[] rhsArray = {13.5,9,4,-4,5,8,12.5,20,25.5,4.5,3.5,17.5,12.5,8,15.5,10.5,5.5,5.5,26.5,3};
//        double[][] lhsArray = {{3, -1}, {-1, 3}};
//        double[] rhsArray = {1.5, .5};
//        double[][] lhsArray = {{5, 0, -1, -1}, {0, 4, -1, 0}, {-1, -1, 6, -1}, {-1, 0, -1, 4}};
//        double[] rhsArray = {.5, 1, 1, 1};
        //Creating Matrix Objects with arrays
        Matrix lhs = new Matrix(lhsArray);
        Matrix rhs = new Matrix(rhsArray, 20);
        //Calculate Solved Matrix
        Matrix ans = lhs.solve(rhs);
        //Printing Answers
        System.out.println("Man United = " + ans.get(0, 0));
        System.out.println("Bournemouth = " + ans.get(1, 0));
        System.out.println("Fulham = " + ans.get(2, 0));
        System.out.println("Huddersfield = " + ans.get(3, 0));
        System.out.println("Newcastle = " + ans.get(4, 0));
        System.out.println("Watford = " + ans.get(5, 0));
        System.out.println("Wolves = " + ans.get(6, 0));
        System.out.println("Arsenal = " + ans.get(7, 0));
        System.out.println("Liverpool = " + ans.get(8, 0));
        System.out.println("Southampton = " + ans.get(9, 0));
        System.out.println("Cardiff = " + ans.get(10, 0));
        System.out.println("Chelsea = " + ans.get(11, 0));
        System.out.println("Everton = " + ans.get(12, 0));
        System.out.println("Leicester = " + ans.get(13, 0));
        System.out.println("Tottenham = " + ans.get(14, 0));
        System.out.println("West Ham = " + ans.get(15, 0));
        System.out.println("Brighton = " + ans.get(16, 0));
        System.out.println("Burnley = " + ans.get(17, 0));
        System.out.println("Man City = " + ans.get(18, 0));
        System.out.println("Crystal Palace = " + ans.get(19, 0));

    }

    public static void main(String[] args) {
        new RankingSystem();
    }

}
